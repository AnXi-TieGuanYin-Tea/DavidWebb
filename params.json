{"name":"Davidwebb","tagline":"Lightweight Java HTTP-Client for calling JSON REST-Services (especially for Android)","body":"# DavidWebb\r\n\r\nLightweight Java HTTP-Client for calling JSON REST-Services (especially made for Android).\r\n\r\n## Problem\r\n\r\nIf you have to call a RESTful Webservice from Java, especially if you are on Android, you have some options:\r\n\r\n * Use `DefaultHttpClient` or `AndroidHttpClient`. It is already deployed on Android and it's easy to use.\r\n   But wait a moment -\r\n   [Google doesn't recommend using it](http://android-developers.blogspot.de/2011/09/androids-http-clients.html),\r\n   only on very old Android versions.\r\n * Use `HttpURLConnection`. This is what Google recommends for newer Android versions (>= Gingerbread).\r\n   It is part of JDK, but it's cumbersome to use (if not to say a nightmare).\r\n * Add `Unirest`, `Restlet` or some other \"all-you-can-eat\", universal, multi-part, File-upload and all-cases\r\n   supporting library which adds some hundred KB of jars to your APK.\r\n\r\n## Solved\r\n\r\n**DavidWebb** is a small wrapper around\r\n[HttpURLConnection](http://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html).\r\nIt supports most HTTP communication cases when you talk to REST services and your data is JSON. It is very\r\nlightweight (~16 KB jar) and super-easy to use.\r\n\r\n## Features ##\r\n\r\n  * Supports GET, POST, PUT, DELETE\r\n  * add HTTP headers (per request, per client or globally)\r\n  * convert params to `x-www-form-urlencoded` body **or** URI search params\r\n  * fluent API\r\n  * org.json support (JSONObject, JSONArray) as payload in both directions (up/down)\r\n  * wraps all Exceptions in a WebbException (a RuntimeException)\r\n  * automatically sets many boiler-plate HTTP headers (like 'Accept', 'Content-Type', 'Content-Length')\r\n  * supports HTTPS and enables relaxing SSL-handshake (self-signed certificates, hostname verification)\r\n  * pass-through to \"real\" connection for special cases\r\n\r\n## Non-Features ##\r\n\r\nFollowing features are not supported and there are no plans to realize them:\r\n\r\n  * Cookie management (read `Set-Cookie` header from response and set `Cookie` header for request)\r\n  * Comfortable Basic Authentication (it's not hard to implement it above of DavidWebb, see below)\r\n  * Multi-Part upload\r\n  * Mixing URL-parameters and x-www-form-urlencoded POST bodies.<br>\r\n    Workaround: build the URI with the help of `WebbUtils.queryString` and use `Request.param()` for\r\n    the form-fields.\r\n\r\nWhere not stated, the workaround is to use another library or implement it above of DavidWebb.\r\nIf you think your implementation might be useful for others and it's not blowing up the size of\r\nthe JAR, please create a pull request. (Adding heavy dependencies is not an option.)\r\n\r\n# Usage Examples\r\n\r\nBelow you can see some examples of how to use DavidWebb. And here you can find the\r\n[API Documentation](http://hgoebl.github.io/DavidWebb/).\r\n\r\nThis is some code from a SyncAdapter of an Android App:\r\n\r\n```java\r\n// create the client (one-time, can be used from different threads)\r\nWebb webb = Webb.create();\r\nwebb.setBaseUri(SyncPreferences.REST_ENDPOINT);\r\nwebb.setDefaultHeader(Webb.HDR_USER_AGENT, Const.UA);\r\n\r\n// later we authenticate\r\nResponse<JSONObject> response = webb\r\n        .post(\"/session\")\r\n        .param(\"authentication\", createAuthentication(syncPreferences))\r\n        .param(\"deviceId\", syncPrefs.getDeviceId())\r\n        .ensureSuccess()\r\n        .asJsonObject();\r\n\r\nJSONObject apiResult = response.getBody();\r\n\r\nAccessToken accessToken = new AccessToken();\r\naccessToken.token = apiResult.getString(\"token\");\r\naccessToken.validUntil = apiResult.getLong(\"validUntil\");\r\n\r\nwebb.setDefaultHeader(HDR_ACCESS_TOKEN, accessToken.token);\r\n\r\nJSONObject sync = webb.post(\"/startSync\")\r\n        .param(\"lastSync\", syncPrefs.getLastSync())\r\n        .ensureSuccess()\r\n        .asJsonObject()\r\n        .getBody();\r\n\r\n// ... etc. etc.\r\n\r\n// releaseAccessToken\r\nwebb.delete(\"/session\").asVoid();\r\naccessToken = null;\r\n```\r\n\r\nUsing Google Directions API:\r\n\r\n```java\r\nWebb webb = Webb.create();\r\nJSONObject result = webb\r\n        .get(\"http://maps.googleapis.com/maps/api/directions/json\")\r\n        .param(\"origin\", new GeoPoint(47.8227, 12.096933))\r\n        .param(\"destination\", new GeoPoint(47.8633, 12.215533))\r\n        .param(\"mode\", \"walking\")\r\n        .param(\"sensor\", \"true\")\r\n        .ensureSuccess()\r\n        .asJsonObject()\r\n        .getBody();\r\n\r\nJSONArray routes = result.getJSONArray(\"routes\");\r\n```\r\n\r\nYou have to do Basic Authentication?\r\n\r\nThis authorization method uses a Base64 encoded string. Unfortunately Java SE doesn't provide a\r\nBase64 encoder. Because DavidWebb wants to be light and Android already provides a Base64 support class,\r\nit's left to you to insert a few lines of code. As you can see, it's not hard work.\r\nUse one of the methods to set a header and set Authorization header by yourself:\r\n\r\n```java\r\nbyte[] credentials = (username + \":\" + password).getBytes(\"UTF-8\");\r\nString auth = \"Basic \" + Base64.encodeToString(credentials, 0);\r\nWebb webb = Webb.create();\r\nwebb.setDefaultHeader(Webb.HDR_AUTHORIZATION, auth);\r\n```\r\n\r\nIf you want to see more examples, just have a look at the JUnit TestCase (src/test/java/...).\r\n\r\n## Special Case Android < Froyo\r\n\r\nYou should add this if you build for legacy Android devices:\r\n\r\n```java\r\nif (Integer.parseInt(Build.VERSION.SDK) < Build.VERSION_CODES.FROYO) {\r\n    System.setProperty(\"http.keepAlive\", \"false\");\r\n}\r\n```\r\n\r\n# Background\r\n\r\n## Not for you?\r\n\r\nIf **DavidWebb** is too lightweight and you're missing features, you can have a look at:\r\n\r\n  * [RESTDroid](https://github.com/PCreations/RESTDroid)\r\n  * [RoboSpice](https://github.com/octo-online/robospice)\r\n  * [android-rest-client](https://github.com/darko1002001/android-rest-client)\r\n  * [unirest](http://unirest.io/)\r\n  * [Restlet Framework](http://restlet.org/)\r\n  * [Volley](https://android.googlesource.com/platform/frameworks/volley) and\r\n    [Volley Example](http://www.technotalkative.com/android-volley-library-example/)\r\n  * [DataDroid](http://datadroid.foxykeep.com/) - an Android library for Data Management\r\n  * [More Alternatives (on RoboSpice)](https://github.com/octo-online/robospice#alternatives-to-robospice-)\r\n  * (tell me if I missed your award-winning REST-client library!)\r\n\r\n## The Name!?\r\n\r\nDavid **Webb** is the real name of **Jason** Bourne.\r\n\r\nSo **JSON** and **Web**, did you get it? OK, might be silly, but Bourne 1-3 are my favorite films and so at\r\nleast I can remember the name.\r\n\r\nFrom Wikipedia:\r\n\r\n> [Jason Bourne](http://en.wikipedia.org/wiki/Jason_Bourne) is a fictional character and the protagonist\r\nof a series of novels by Robert Ludlum and subsequent film adaptations\r\n\r\n# License\r\n\r\nMIT License, see LICENSE file\r\n\r\n# Testing\r\n\r\nThe Unit-Tests do not mock any network-libraries, but depend on a small Express-application running.\r\n\r\n## Setup\r\n\r\n```\r\ncd src/test/api-test-server\r\nnpm install\r\nnode .\r\n```\r\n\r\nIf you don't want to do this, just skip the tests in Maven build `-DskipTests`\r\n\r\nAnd if you don't want to build the library, just take the jar from the `dist` folder.\r\n\r\n# TODO\r\n\r\n## Features (planned)\r\n  * unprefixJson <http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx>\r\n\r\n## Features (only ideas)\r\n  * decorator/interceptor beforeSend - provide hooks to manipulate request before send\r\n  * decorator/interceptor afterReceive - provide hooks to manipulate raw response after receiving it\r\n\r\nCreate an issue if you want to have one of those ideas implemented.\r\n\r\n## Documentation / Distribution\r\n  * Extend Tests, test against httpbin.org\r\n  * Upload maven artifact to central repository (OMG how easy this would be with node.js and npm!)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}